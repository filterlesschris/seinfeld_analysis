#summarize(companyMaax = max(stockPrice))
stocks3
#Plot data
ggplot(stocks3, aes(time, stockPrice, color = Company)) +
geom_point() + facet_wrap(~Company)
#Plot data
ggplot(stocks3, aes(time, stockPrice, color = Company)) +
geom_point()# + facet_wrap(~Company)
stocks4 <- stocks3 %>%
spread(Company, stockPrice) #spread is like creating a pivot table
stocks4
stocks5 <- stocks3 %>%
sample_n(10)
stocks5
stocks5 %>% select(-stockPrice) %>%
spread(Company, -time)
stocks5
stocks5 <- stocks %>%
select(-time) %>%
gather(key = "Company",
value = "stockPrice") %>%
group_by(Company) %>%
summarize(stockMax = max(stockPrice),
stockMin = min(stockPrice))
stocks5
library(rpart)
data(iris)
install.packages("partykit")
library(partykit)
str(iris)
tree1 <- ctree(Species ~ . , data = iris)
plot(tree1)
library(ggplot2)
# Install packages
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read in data file
data <- read.csv("../rawData/seinfeld.csv")
glimpse(data)
# Re-order dataframe and drop non-numerical variables
data <- data[,c("IMDB.Rating", "Season", "EpisodeNo",
"SentimentTotal", "LineCountTotal", "WordCountTotal",
"SentimentJerry", "LineCountJerry", "WordCountJerry",
"SentimentGeorge", "LineCountGeorge", "WordCountGeorge",
"SentimentKramer", "LineCountKramer", "WordCountKramer",
"SentimentElaine", "LineCountElaine", "WordCountElaine",
"SentimentMainChars", "LineCountMainChars", "WordCountMainChars",
"SentimentSecondary", "LineCountSecondary", "WordCountSecondary",
"SentimentOther", "LineCountOther", "WordCountOther"
)]
colnames(data)[colnames(data)=="IMDB.Rating"] <- "IMDBrating"
summary(data)
lm?
?
)
()
?lm
fit1
# Create a regression model to predict "IMDB.Rating"
fit1 <- lm(IMDBrating ~ ., data)
fit1
summary(fit1)
names(fit1)
plot(data$IMDBrating, type = "l", color = "blue")
plot(data$IMDBrating, type = "l", col = "blue")
plot(data$IMDBrating, type = "l", col = "blue", lwd = 2)
plot(data$IMDBrating, type = "l", col = "black", lwd = 2)
lines(fit1$fitted.values, type = "l", col = "blue", lwd = 2)
plot(data$IMDBrating, type = "l", col = "black", lwd = 2)
plot(fit1$fitted.values, type = "l", col = "blue", lwd = 2)
plot(data$IMDBrating, type = "l", col = "black", lwd = 2)
line(fit1$fitted.values, type = "l", col = "blue", lwd = 2)
line(fit1$fitted.values)
lines(fit1$fitted.values)
?lines
# Residual Plot
plot(fit1$residuals, type = "h", col = "red", lwd = 2)
abline(0,0)
?abline
# Create a regression model to predict "IMDB.Rating"
fit1 <- lm(IMDBrating ~ ., data)
summary(fit1)
# Residual Plot
plot(fit1$residuals, type = "h", col = "red", lwd = 2)
fit1$residuals
plot(fit1$fitted.values)
# Plot Actual vs. Predicted Values
plot(fit1$fitted.values, type = "l", col = "blue", lwd = 2)
?lines
length(fit1$fitted.values)
length(data$IMDBrating)
fit1$fitted.values
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read in data file
data <- read.csv("../rawData/seinfeld.csv")
# Re-order dataframe and drop non-numerical variables
data <- data[,c("IMDBrating", "Season", "EpisodeNo",
"SentimentTotal", "LineCountTotal", "WordCountTotal",
"SentimentJerry", "LineCountJerry", "WordCountJerry",
"SentimentGeorge", "LineCountGeorge", "WordCountGeorge",
"SentimentKramer", "LineCountKramer", "WordCountKramer",
"SentimentElaine", "LineCountElaine", "WordCountElaine",
"SentimentMainChars", "LineCountMainChars", "WordCountMainChars",
"SentimentSecondary", "LineCountSecondary", "WordCountSecondary",
"SentimentOther", "LineCountOther", "WordCountOther"
)]
glimpse(data)
# Read in data file
data <- read.csv("../rawData/seinfeld_v2.csv")
# Re-order dataframe and drop non-numerical variables
data <- data[,c("IMDBrating", "Season", "EpisodeNo",
"SentimentTotal", "LineCountTotal", "WordCountTotal",
"SentimentJerry", "LineCountJerry", "WordCountJerry",
"SentimentGeorge", "LineCountGeorge", "WordCountGeorge",
"SentimentKramer", "LineCountKramer", "WordCountKramer",
"SentimentElaine", "LineCountElaine", "WordCountElaine",
"SentimentMainChars", "LineCountMainChars", "WordCountMainChars",
"SentimentSecondary", "LineCountSecondary", "WordCountSecondary",
"SentimentOther", "LineCountOther", "WordCountOther"
)]
#colnames(data)[colnames(data)=="IMDB.Rating"] <- "IMDBrating"
summary(data)
# Create a regression model to predict "IMDB.Rating"
fit1 <- lm(IMDBrating ~ ., data)
summary(fit1)
# Residual Plot
plot(fit1$residuals, type = "h", col = "red", lwd = 2)
# Plot Actual vs. Predicted Values
plot(fit1$fitted.values, type = "l", col = "blue", lwd = 2)
lines()
summary(fit1)
# Read in data file
data <- read.csv("../rawData/seinfeld_v2.csv")
glimpse(data)
# Read in data file
data <- read.csv("../rawData/seinfeld_v2.csv")
glimpse(data)
# Re-order dataframe and drop non-numerical variables
data <- data[,c("IMDBrating", "Season", "EpisodeNo",
"SentimentTotal", "LineCountTotal", "WordCountTotal",
"SentimentJerry", "LineCountJerry", "WordCountJerry",
"SentimentGeorge", "LineCountGeorge", "WordCountGeorge",
"SentimentKramer", "LineCountKramer", "WordCountKramer",
"SentimentElaine", "LineCountElaine", "WordCountElaine",
"SentimentMainChars", "LineCountMainChars", "WordCountMainChars",
"SentimentSecondary", "LineCountSecondary", "WordCountSecondary",
"SentimentOther", "LineCountOther", "WordCountOther", "TwoParter"
)]
# Create a regression model to predict "IMDB.Rating"
fit1 <- lm(IMDBrating ~ ., data)
summary(fit1)
# Residual Plot
plot(fit1$residuals, type = "h", col = "red", lwd = 2)
abline(0,0)
bline(0,0)
line(0,0)
lines(0,0)
?abline
# Residual Plot
plot(fit1$residuals, type = "h", col = "red", lwd = 2)
# Plot Actual vs. Predicted Values
plot(fit1$fitted.values, type = "l", col = "blue", lwd = 2)
# Read in data file
data <- read.csv("../rawData/seinfeld_v2.csv")
glimpse(data)
# Re-order dataframe and drop non-numerical variables
data <- data[,c("IMDBrating", "Season", "EpisodeNo",
"SentimentTotal", "LineCountTotal", "WordCountTotal",
"SentimentJerry", "LineCountJerry", "WordCountJerry",
"SentimentGeorge", "LineCountGeorge", "WordCountGeorge",
"SentimentKramer", "LineCountKramer", "WordCountKramer",
"SentimentElaine", "LineCountElaine", "WordCountElaine",
"SentimentMainChars", "LineCountMainChars", "WordCountMainChars",
"SentimentSecondary", "LineCountSecondary", "WordCountSecondary",
"SentimentOther", "LineCountOther", "WordCountOther", "TwoParter", "Pilot", "Finale"
)]
# Create a regression model to predict "IMDB.Rating"
fit1 <- lm(IMDBrating ~ ., data)
summary(fit1)
# Drop episode 1...
dim(data)
dim(data)[1]
# Drop episode 1...
data2 <- data[c(2:dim(data)[1]),]
head(data2)
# Create a regression model to predict "IMDB.Rating"
fit2 <- lm(IMDBrating ~ ., data2)
summary(fit2)
head(data2)
# Drop all of Season 1...
data3 <- data[c(5:dim(data)[1]),]
head(data3)
# Create a regression model to predict "IMDB.Rating"
fit3 <- lm(IMDBrating ~ ., data3)
summary(fit23)
summary(fit3)
# Read in data file
data <- read.csv("../rawData/seinfeld.csv")
glimpse(data)
# Re-order dataframe and drop non-numerical variables
data <- data[,c("IMDBrating", "Season", "EpisodeNo",
"SentimentTotal", "LineCountTotal", "WordCountTotal",
"SentimentJerry", "LineCountJerry", "WordCountJerry",
"SentimentGeorge", "LineCountGeorge", "WordCountGeorge",
"SentimentKramer", "LineCountKramer", "WordCountKramer",
"SentimentElaine", "LineCountElaine", "WordCountElaine",
"SentimentMainChars", "LineCountMainChars", "WordCountMainChars",
"SentimentSecondary", "LineCountSecondary", "WordCountSecondary",
"SentimentOther", "LineCountOther", "WordCountOther"
)]
# Re-order dataframe and drop non-numerical variables
data <- data[,c("IMDB.Rating", "Season", "EpisodeNo",
"SentimentTotal", "LineCountTotal", "WordCountTotal",
"SentimentJerry", "LineCountJerry", "WordCountJerry",
"SentimentGeorge", "LineCountGeorge", "WordCountGeorge",
"SentimentKramer", "LineCountKramer", "WordCountKramer",
"SentimentElaine", "LineCountElaine", "WordCountElaine",
"SentimentMainChars", "LineCountMainChars", "WordCountMainChars",
"SentimentSecondary", "LineCountSecondary", "WordCountSecondary",
"SentimentOther", "LineCountOther", "WordCountOther"
)]
colnames(data)[colnames(data)=="IMDB.Rating"] <- "IMDBrating"
summary(data)
# Create a regression model to predict "IMDB.Rating"
fit1 <- lm(IMDBrating ~ ., data)
summary(fit1)
# Residual Plot
plot(fit1$residuals, type = "h", col = "red", lwd = 2)
summary(fit1)
# Plot Actual vs. Predicted Values
plot(x = data$IMDBrating, y = fit1$fitted.values)
summary(fit1)
# Read in data file (this data removed Sentiments of 0)
data2 <- read.csv("../rawData/seinfeld_v2.csv")
glimpse(data2)
# Re-order dataframe and drop non-numerical variables
data2 <- data2[,c("IMDBrating",
"PosTotal", "NegTotal", "CompTotal", "LineCountTotal", "WordCountTotal",
"PosJerry", "NegJerry", "CompJerry", "LineCountJerry", "WordCountJerry",
"PosGeorge", "NegGeorge", "CompGeorge", "LineCountGeorge", "WordCountGeorge",
"PosKramer", "NegKramer", "CompKramer", "LineCountKramer", "WordCountKramer",
"PosSecond", "NegSecond", "CompSecond", "LineCountSecond", "WordCountSecond",
"PosOther", "NegOther", "CompOther", "LineCountOther", "WordCountOther",
"TwoParter", "Pilot", "Finale"
)]
#colnames(data)[colnames(data)=="IMDB.Rating"] <- "IMDBrating"
summary(data)
# Create a regression model to predict "IMDB.Rating"
fit2 <- lm(IMDBrating ~ ., data2)
summary(fit2)
# Drop all of Season 1...
data3 <- data2[c(5:dim(data)[1]),]
# Create a regression model to predict "IMDB.Rating"
fit3 <- lm(IMDBrating ~ ., data3)
summary(fit3)
data3 <- abs(data2)
fit3 <- lm(IMDBrating ~ ., data3)
summary(fit3)
# generate bins based on input$bins from ui.R
data <- read.csv("../outputData/seinfeld.csv")
setwd("~/UCI Data Science/Projects/UCI-Project-3/seinfeld_analysis/R/Seinfeld_Analysis")
# generate bins based on input$bins from ui.R
data <- read.csv("../../outputData/seinfeld.csv")
scripts <- read.csv("../../outputData/cleaned_scripts.csv")
summary_scripts <- read.csv("../../outputData/merged_scripts.csv")
rm(data)
rm(data2)
rm(data3)
rm(fit1)
rm(fit2)
rm(fit3)
# Read in raw data files
seinfeld_data <- read.csv("../../outputData/seinfeld.csv")
library(plotly)
packageVersion('plotly')
library(shiny)
library(tidyr)
library(dplyr)
library(plotly)
packageVersion('plotly')
library(quantmod)
install.packages("quantmod")
library(quantmod)
scripts <- read.csv("../../outputData/cleaned_scripts.csv")
glimpse(scripts)
plt <- ggplot(scripts, aes(X, CompSent)) + geom_line()
frogger <- subset(scripts, SEID == "S09E18")
plt <- ggplot(frogger, aes(X, CompSent)) + geom_line()
plt
plt <- ggplot(frogger, aes(X, CompSent)) + geom_line(aes(color = Character))
plt
plt <- ggplot(frogger, aes(X, CompSent)) + geom_bar(aes(color = Chara))
plt
plt <- ggplot(frogger, aes(X, CompSent)) + geom_bar(aes(color = Character))
plt
plt <- ggplot(frogger, aes(CompSent)) + geom_bar(aes(color = Character))
plt
plt <- ggplot(frogger, aes(X, CompSent)) + geom_line()
plt
# Read in data file
data <- read.csv("../outputData/seinfeld.csv")
glimpse(data)
summary(data)
# Re-order dataframe and drop non-numerical variables
data <- data[,c("IMDB.Rating", "Viewers", "Season", "EpisodeNo",
"SentimentTotal", "LineCountTotal", "WordCountTotal",
"SentimentJerry", "LineCountJerry", "WordCountJerry",
"SentimentGeorge", "LineCountGeorge", "WordCountGeorge",
"SentimentKramer", "LineCountKramer", "WordCountKramer",
"SentimentElaine", "LineCountElaine", "WordCountElaine",
"SentimentMainChars", "LineCountMainChars", "WordCountMainChars",
"SentimentSecondary", "LineCountSecondary", "WordCountSecondary",
"SentimentOther", "LineCountOther", "WordCountOther"
)]
# Read in data file
data <- read.csv("../outputData/seinfeld.csv")
# Re-order dataframe and drop non-numerical variables
data <- data[,c("IMDB.Rating", "Viewers", "Season", "EpisodeNo",
"SentimentTotal", "LineCountTotal", "WordCountTotal",
"SentimentJerry", "LineCountJerry", "WordCountJerry",
"SentimentGeorge", "LineCountGeorge", "WordCountGeorge",
"SentimentKramer", "LineCountKramer", "WordCountKramer",
"SentimentElaine", "LineCountElaine", "WordCountElaine",
"SentimentMainChars", "LineCountMainChars", "WordCountMainChars",
"SentimentSecondary", "LineCountSecondary", "WordCountSecondary",
"SentimentOther", "LineCountOther", "WordCountOther"
)]
# Re-order dataframe and drop non-numerical variables
data <- data[,c("IMDBrating", "Viewers", "Season", "EpisodeNo",
"SentimentTotal", "LineCountTotal", "WordCountTotal",
"SentimentJerry", "LineCountJerry", "WordCountJerry",
"SentimentGeorge", "LineCountGeorge", "WordCountGeorge",
"SentimentKramer", "LineCountKramer", "WordCountKramer",
"SentimentElaine", "LineCountElaine", "WordCountElaine",
"SentimentMainChars", "LineCountMainChars", "WordCountMainChars",
"SentimentSecondary", "LineCountSecondary", "WordCountSecondary",
"SentimentOther", "LineCountOther", "WordCountOther"
)]
glimpse(data)
# Re-order dataframe and drop non-numerical variables
data <- data[,c("IMDBrating", "Viewers", "Season", "EpisodeNo",
"SentimentTotal", "LineCountTotal", "WordCountTotal",
"SentimentJerry", "LineCountJerry", "WordCountJerry",
"SentimentGeorge", "LineCountGeorge", "WordCountGeorge",
"SentimentKramer", "LineCountKramer", "WordCountKramer",
"SentimentElaine", "LineCountElaine", "WordCountElaine",
"SentimentMainChars", "LineCountMainChars", "WordCountMainChars",
"SentimentSecondary", "LineCountSecondary", "WordCountSecondary",
"SentimentOther", "LineCountOther", "WordCountOther"
)]
head(data)
# Re-order dataframe and drop non-numerical variables
data <- data[,c("IMDBrating", "Season", "EpisodeNo",
"SentimentTotal", "LineCountTotal", "WordCountTotal",
"SentimentJerry", "LineCountJerry", "WordCountJerry",
"SentimentGeorge", "LineCountGeorge", "WordCountGeorge",
"SentimentKramer", "LineCountKramer", "WordCountKramer",
"SentimentElaine", "LineCountElaine", "WordCountElaine",
"SentimentMainChars", "LineCountMainChars", "WordCountMainChars",
"SentimentSecondary", "LineCountSecondary", "WordCountSecondary",
"SentimentOther", "LineCountOther", "WordCountOther"
)]
head(data)
# Re-order dataframe and drop non-numerical variables
data <- data[,c("IMDBrating", "Viewers",
"PosTotal", "NegTotal", "CompTotal", "LineCountTotal", "WordCountTotal",
"PosJerry", "NegJerry", "CompJerry", "LineCountJerry", "WordCountJerry",
"PosGeorge", "NegGeorge", "CompGeorge", "LineCountGeorge", "WordCountGeorge",
"PosKramer", "NegKramer", "CompKramer", "LineCountKramer", "WordCountKramer",
"PosSecond", "NegSecond", "CompSecond", "LineCountSecond", "WordCountSecond",
"PosOther", "NegOther", "CompOther", "LineCountOther", "WordCountOther",
"Pilot", "Finale"
)]
# Create a regression model to predict "IMDB.Rating"
fit1 <- lm(IMDBrating ~ ., data)
summary(fit1)
frogger
head(frogger)
names(frogger)
frogger <- frogger(:,-1)
frogger <- frogger(,-1)
frogger[1]
frogger <- frogger[-1]
names(frogger)
frogger["index"] <- frogger[1]
names(frogger)
frogger <- frogger[-1]
names(frogger)
frogger <- subset(scripts, SEID == "S09E18")
frogger["index"] = frogger[1]
frogger <- frogger[-c(1,2)]
names(frogger)
plt <- ggplot(frogger, aes(X, CompSent)) + geom_line()
plt <- ggplot(frogger, aes(index, CompSent)) + geom_line()
plt
# Chart 2 - Cumulative line count per character by episode
ggplot(subset(frogger, Character == "George"), aes(Dialogue)) + stat_ecdf(geom = "step")
# Chart 2 - Cumulative line count per character by episode
ggplot(subset(frogger, Character == "George"), aes(Dialogue)) + geom_line()
dim(frogger)
frogger["index"][299]
frogger["index"][299]
frogger["index"][298]
frogger["index"]
# Chart 2 - Cumulative line count per character by episode
index = frogger["index"]
n <- length(index)
n
dim(index)
n = dim(index)[1]
n
index[299]
index[298]
head(frogger)
glimpse(frogger)
head(frogger)
rownames(frogger) <- seq(length=nrow(frogger))
head(frogger)
plt <- ggplot(frogger, aes(index, CompSent)) + geom_line()
plt <- ggplot(frogger, aes(index, CompSent)) + geom_line()
plt
head(frogger)
frogger["index"] = seq(length=nrow(frogger))
head(frogger)
plt <- ggplot(frogger, aes(index, CompSent)) + geom_line()
plt
# Chart 2 - Cumulative line count per character by episode
head(frogger)
dim(frogger)[1]
frogger["index"][299]
frogger["index"][298]
frogger["index"]
frogger$Character[1]
as.character(frogger$Character[1])
char == "George"
for(i in 1:dim(frogger)[1]){
if (as.character(frogger$Character[i]) == char) {
count = count + 1
}
char_count = c(char_count, count)
}
char == "George"
char = "George"
count = 0
char_count = NULL
for(i in 1:dim(frogger)[1]){
if (as.character(frogger$Character[i]) == char) {
count = count + 1
}
char_count = c(char_count, count)
}
plot(char_count)
char_count
char = "GEORGE"
for(i in 1:dim(frogger)[1]){
if (as.character(frogger$Character[i]) == char) {
count = count + 1
}
char_count = c(char_count, count)
}
plot(char_count)
char_count = NULL
for(i in 1:dim(frogger)[1]){
if (as.character(frogger$Character[i]) == char) {
count = count + 1
}
char_count = c(char_count, count)
}
ggplot(subset(frogger, Character == "George"), aes(Dialogue)) + geom_line()
for(i in 1:dim(frogger)[1]){
if (as.character(frogger$Character[i]) == char) {
count = count + 1
}
char_count = c(char_count, count)
}
char_count = NULL
for(i in 1:dim(frogger)[1]){
if (as.character(frogger$Character[i]) == char) {
count = count + 1
}
char_count = c(char_count, count)
}
head(char_count)
char = "GEORGE"
count = 0
char_count = NULL
for(i in 1:dim(frogger)[1]){
if (as.character(frogger$Character[i]) == char) {
count = count + 1
}
char_count = c(char_count, count)
}
head(char_count)
char_count
ggplot(char_count, aes(char_count)) + geom_line()
plot(char_count, type = "l", col="blue", lwd = 2)
unique(frogger$Character)
as.character(unique(frogger$Character))
char_list <- c("JERRY", "GEORGE", "KRAMER", "ELAINE", "SECONDARY", "OTHER")
# Chart 2 - Cumulative line count per character by episode
head(frogger)
jerry_count <- 0
george_count <- 0
kramer_count <- 0
elaine_count <- 0
second_count <- 0
other_count <- 0
# Chart 2 - Cumulative line count per character by episode
head(frogger)
